@page "/vehicles"
@rendermode InteractiveServer
@inject VehicleService VehicleService
@using SaAn.Domain.Entities
@using SaAn.Infrastructure.Services
@using System.Timers
@implements IDisposable

<div>
    <input type="text" @oninput="OnSearchTermChanged" placeholder="Search by model or brand..."/>
</div>

@if (vehicles != null)
{
    <div style="display: flex;">
        <div style="flex: 1; padding-right: 20px;">
            <h4>Vehicles</h4>
            @foreach (var vehicle in vehicles)
            {
                <button @onclick="() => SelectVehicle(vehicle)" style="width: 100%; text-align: left;">
                    @vehicle.Model (@vehicle.Brand)
                </button>
            }
        </div>
        <div style="flex: 2;">
            <h4>Spare Parts</h4>
            @if (selectedVehicle != null)
            {
                <ul>
                    @foreach (var sparePart in selectedVehicle.VehicleSpareParts.Select(vsp => vsp.SparePart))
                    {
                        <li>@sparePart.Name - @sparePart.Description</li>
                    }
                </ul>
            }
            else
            {
                <p>Select a vehicle to see spare parts.</p>
            }
        </div>
    </div>
}

@code {
    private List<Vehicle>? vehicles;
    private Vehicle? selectedVehicle;
    private string searchTerm = string.Empty;
    private Timer? debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        vehicles = await VehicleService.GetVehicles();
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        debounceTimer?.Stop();
        debounceTimer?.Dispose();

        debounceTimer = new Timer(500); // Set debounce period to 500 ms
        debounceTimer.Elapsed += async (sender, args) =>
        {
            debounceTimer?.Stop();
            // Execute search on the UI thread
            await InvokeAsync(async () =>
            {
                selectedVehicle = null;
                await Search();
            });
        };
        debounceTimer.Start();
    }

    private async Task Search()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            vehicles = await VehicleService.SearchVehicles(searchTerm);
        }
        else
        {
            vehicles = await VehicleService.GetVehicles();
        }

        StateHasChanged();
    }

    private void SelectVehicle(Vehicle vehicle)
    {
        selectedVehicle = vehicle == selectedVehicle ? null : vehicle;
        StateHasChanged();
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }

}