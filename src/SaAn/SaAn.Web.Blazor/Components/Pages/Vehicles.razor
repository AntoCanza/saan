@page "/vehicles"
@rendermode InteractiveServer
@inject VehicleService VehicleService
@using SaAn.Infrastructure.Dtos
@using SaAn.Infrastructure.Services
@using System.Timers
@implements IDisposable

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <input type="text" class="form-control" @oninput="OnSearchTermChanged" placeholder="Search by model or brand..."/>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-4">
            <h4>Vehicles</h4>
            <div class="list-group">
                @foreach (var vehicle in vehicles)
                {
                    var vehicleClass = vehicle.Id == selectedVehicle?.Id ? "list-group-item list-group-item-action bg-primary text-white" : "list-group-item list-group-item-action";
                    <button @onclick="() => SelectVehicle(vehicle)" class="@vehicleClass">
                        @vehicle.Model (@vehicle.Brand)
                    </button>
                }
            </div>
        </div>
        <div class="col-md-4">
            <h4>Spare Parts</h4>
            @if (selectedVehicle != null)
            {
                <div class="list-group">
                    @foreach (var sparePart in spareParts)
                    {
                        var sparePartClass = sparePart.Id == selectedSparePart?.Id ? "list-group-item list-group-item-action bg-primary text-white" : "list-group-item list-group-item-action";
                        <button @onclick="() => SelectSparePart(sparePart)" class="@sparePartClass">
                            @sparePart.Name - @sparePart.PartNumber
                        </button>
                    }
                </div>
            }
            else
            {
                <p>Select a vehicle to see spare parts.</p>
            }
        </div>
        <div class="col-md-4" style="position: -webkit-sticky; position: sticky; top: 5%; max-height: 100vh; overflow-y: auto;">
            @if (selectedVehicle != null)
            {
                <h4>Vehicles Details</h4>
                <div>
                    <p>
                        <strong>Brand:</strong> @selectedVehicle.Brand
                    </p>
                    <p>
                        <strong>Model:</strong> @selectedVehicle.Model
                    </p>
                    <p>
                        <strong>Vehicle Type:</strong> @selectedVehicle.VehicleType
                    </p>
                </div>
            }
            @if (selectedSparePart != null)
            {
                <h4>Spare Part Details</h4>
                <div>
                    <p>
                        <strong>Name:</strong> @selectedSparePart.Name
                    </p>
                    <p>
                        <strong>Part Number:</strong> @selectedSparePart.PartNumber
                    </p>
                    <p>
                        <strong>Description:</strong> @selectedSparePart.Description
                    </p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<VehicleDto>? vehicles = new();
    private VehicleDto? selectedVehicle;
    private List<SparePartDto>? spareParts = new();
    private SparePartDto? selectedSparePart;
    private string searchTerm = string.Empty;
    private Timer? debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        vehicles = await VehicleService.GetVehicles();
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        debounceTimer?.Stop();
        debounceTimer?.Dispose();

        debounceTimer = new Timer(500); // Set debounce period to 500 ms
        debounceTimer.Elapsed += async (sender, args) =>
        {
            debounceTimer?.Stop();
            // Execute search on the UI thread
            await InvokeAsync(async () =>
            {
                selectedVehicle = null;
                selectedSparePart = null; // Reset selected spare part
                await Search();
            });
        };
        debounceTimer.Start();
    }

    private async Task Search()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            vehicles = await VehicleService.SearchVehicles(searchTerm);
        }
        else
        {
            vehicles = await VehicleService.GetVehicles();
        }

        StateHasChanged();
    }

    private async Task SelectVehicle(VehicleDto vehicle)
    {
        spareParts = await VehicleService.SearchSparePartsByVehicle(vehicle);
        selectedVehicle = await VehicleService.GetVehicleById(vehicle.Id);
        selectedSparePart = null;

        StateHasChanged();
    }

    private async Task SelectSparePart(SparePartDto sparePart)
    {
        selectedSparePart = await VehicleService.GetSparePartById(sparePart.Id);
        StateHasChanged();
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }

}